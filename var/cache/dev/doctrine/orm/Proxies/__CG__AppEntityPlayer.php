<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Player extends \App\Entity\Player implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'money', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'lucks', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'stations', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'properties', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'cases', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'color', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'icon', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'turn', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'nbDouble', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'cards', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'prison', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'ordre'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'money', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'lucks', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'stations', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'properties', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'cases', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'color', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'icon', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'turn', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'nbDouble', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'cards', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'prison', '' . "\0" . 'App\\Entity\\Player' . "\0" . 'ordre'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Player $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getMoney(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMoney', []);

        return parent::getMoney();
    }

    /**
     * {@inheritDoc}
     */
    public function setMoney(?float $money): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMoney', [$money]);

        return parent::setMoney($money);
    }

    /**
     * {@inheritDoc}
     */
    public function getLucks(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLucks', []);

        return parent::getLucks();
    }

    /**
     * {@inheritDoc}
     */
    public function addLuck(\App\Entity\Luck $luck): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLuck', [$luck]);

        return parent::addLuck($luck);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLuck(\App\Entity\Luck $luck): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLuck', [$luck]);

        return parent::removeLuck($luck);
    }

    /**
     * {@inheritDoc}
     */
    public function getStations(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStations', []);

        return parent::getStations();
    }

    /**
     * {@inheritDoc}
     */
    public function addStation(\App\Entity\Station $station): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStation', [$station]);

        return parent::addStation($station);
    }

    /**
     * {@inheritDoc}
     */
    public function removeStation(\App\Entity\Station $station): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeStation', [$station]);

        return parent::removeStation($station);
    }

    /**
     * {@inheritDoc}
     */
    public function getProperties(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperties', []);

        return parent::getProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function addProperty(\App\Entity\Property $property): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProperty', [$property]);

        return parent::addProperty($property);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProperty(\App\Entity\Property $property): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProperty', [$property]);

        return parent::removeProperty($property);
    }

    /**
     * {@inheritDoc}
     */
    public function getCases(): ?\App\Entity\Cases
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCases', []);

        return parent::getCases();
    }

    /**
     * {@inheritDoc}
     */
    public function setCases(?\App\Entity\Cases $cases): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCases', [$cases]);

        return parent::setCases($cases);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', []);

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor(?string $color): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', [$color]);

        return parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getIcon(): ?\App\Entity\Icon
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIcon', []);

        return parent::getIcon();
    }

    /**
     * {@inheritDoc}
     */
    public function setIcon(?\App\Entity\Icon $icon): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIcon', [$icon]);

        return parent::setIcon($icon);
    }

    /**
     * {@inheritDoc}
     */
    public function isTurn(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTurn', []);

        return parent::isTurn();
    }

    /**
     * {@inheritDoc}
     */
    public function setTurn(bool $turn): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTurn', [$turn]);

        return parent::setTurn($turn);
    }

    /**
     * {@inheritDoc}
     */
    public function getNbDouble(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNbDouble', []);

        return parent::getNbDouble();
    }

    /**
     * {@inheritDoc}
     */
    public function setNbDouble(?int $nbDouble): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNbDouble', [$nbDouble]);

        return parent::setNbDouble($nbDouble);
    }

    /**
     * {@inheritDoc}
     */
    public function getCards(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCards', []);

        return parent::getCards();
    }

    /**
     * {@inheritDoc}
     */
    public function addCard(\App\Entity\Cases $card): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCard', [$card]);

        return parent::addCard($card);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCard(\App\Entity\Cases $card): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCard', [$card]);

        return parent::removeCard($card);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrison(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrison', []);

        return parent::getPrison();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrison(int $prison): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrison', [$prison]);

        return parent::setPrison($prison);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrdre(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrdre', []);

        return parent::getOrdre();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrdre(int $ordre): \App\Entity\Player
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrdre', [$ordre]);

        return parent::setOrdre($ordre);
    }

}
